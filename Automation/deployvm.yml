---
- hosts: localhost
  vars:
    sgname: webinstsg
    kpname: Webkey
    vmname: webservers
  tasks:
  - name: example using security group rule descriptions
    ec2_group:
          aws_secret_key: "{{ mysecretkey }}"
          aws_access_key: "{{ myaccesskey }}"
          name: "{{ sgname }}"
          description: sg with rule descriptions
          vpc_id: "{{ vpcid }}"
          region: "{{ region }}"
          rules:
           - proto: tcp
             ports:
               - 80
               - 22
             cidr_ip: 0.0.0.0/0
             rule_desc: allow all on port 80 and 22
    register: webinstsg_output
  - debug:
       var: webinstsg_output
  - name: create VM      
    ec2:
     aws_access_key: "{{ myaccesskey }}"
     aws_secret_key: "{{ mysecretkey }}"
     region: "{{ region }}"
     key_name: "{{ kpname }}"
     group_id: "{{ webinstsg_output.group_id }}"
     instance_type: "{{ instancetype }}"
     image: "{{ myami }}"
     vpc_subnet_id: "{{ subnetid }}"
     assign_public_ip: yes
     instance_tags: 
      Name: "{{ vmname }}"
     count_tag: 
       Name: "{{ vmname }}"
     exact_count: 1
     wait: yes
     wait_timeout: 120
    register: webinstance_output
  - debug:
      var: webinstance_output
  - name: Wait 300 seconds for port 22 to become open and contain "OpenSSH"
    wait_for:
      port: 22
      host: "{{ webinstance_output.tagged_instances[0].dns_name }}"
      search_regex: OpenSSH
      delay: 10
  - name: add host to group 'just_created' with variable foo=42
    add_host:
      name: "{{ webinstance_output.tagged_instances[0].dns_name }}"
      groups: Webservers
      web_admin: mohan@y2ytech.com
      ansible_user: ec2-user
      ansible_ssh_private_key_file: /home/ec2-user/environment/Dev/Automation/Webkey.pem
      ansible_become: yes
      ansible_connection: ssh
- hosts: Webservers
  tasks:
  - name: install the latest version of Apache
    yum:
      name: "{{ item }}"
      state: latest
    loop:
      - httpd
      - mariadb-server
    register: installoutput
  - debug:
     var: installoutput
  - name: Copy code
    copy:
      src: /home/ec2-user/environment/Dev/Automation/index.html
      dest: /var/www/html
  - name: Start service httpd, if not started
    service:
      name: "{{ item }}"
      state: started
      enabled: yes
    loop:
    - httpd
    - mariadb
  handlers:
  - name: restart apache
    service:
      name: "{{ item }}"
      state: restarted
    loop:
      - httpd
      - mariadb
    listen: "myrestart services"
      